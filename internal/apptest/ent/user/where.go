// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/protobuf-orm/protoc-gen-orm-ent/internal/apptest/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Alias applies equality check predicate on the "alias" field. It's identical to AliasEQ.
func Alias(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAlias, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// Lock applies equality check predicate on the "lock" field. It's identical to LockEQ.
func Lock(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLock, v))
}

// DateCreated applies equality check predicate on the "date_created" field. It's identical to DateCreatedEQ.
func DateCreated(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDateCreated, v))
}

// AliasEQ applies the EQ predicate on the "alias" field.
func AliasEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAlias, v))
}

// AliasNEQ applies the NEQ predicate on the "alias" field.
func AliasNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAlias, v))
}

// AliasIn applies the In predicate on the "alias" field.
func AliasIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAlias, vs...))
}

// AliasNotIn applies the NotIn predicate on the "alias" field.
func AliasNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAlias, vs...))
}

// AliasGT applies the GT predicate on the "alias" field.
func AliasGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAlias, v))
}

// AliasGTE applies the GTE predicate on the "alias" field.
func AliasGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAlias, v))
}

// AliasLT applies the LT predicate on the "alias" field.
func AliasLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAlias, v))
}

// AliasLTE applies the LTE predicate on the "alias" field.
func AliasLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAlias, v))
}

// AliasContains applies the Contains predicate on the "alias" field.
func AliasContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAlias, v))
}

// AliasHasPrefix applies the HasPrefix predicate on the "alias" field.
func AliasHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAlias, v))
}

// AliasHasSuffix applies the HasSuffix predicate on the "alias" field.
func AliasHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAlias, v))
}

// AliasIsNil applies the IsNil predicate on the "alias" field.
func AliasIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAlias))
}

// AliasNotNil applies the NotNil predicate on the "alias" field.
func AliasNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAlias))
}

// AliasEqualFold applies the EqualFold predicate on the "alias" field.
func AliasEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAlias, v))
}

// AliasContainsFold applies the ContainsFold predicate on the "alias" field.
func AliasContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAlias, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// LockEQ applies the EQ predicate on the "lock" field.
func LockEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLock, v))
}

// LockNEQ applies the NEQ predicate on the "lock" field.
func LockNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLock, v))
}

// LockIn applies the In predicate on the "lock" field.
func LockIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLock, vs...))
}

// LockNotIn applies the NotIn predicate on the "lock" field.
func LockNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLock, vs...))
}

// LockGT applies the GT predicate on the "lock" field.
func LockGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLock, v))
}

// LockGTE applies the GTE predicate on the "lock" field.
func LockGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLock, v))
}

// LockLT applies the LT predicate on the "lock" field.
func LockLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLock, v))
}

// LockLTE applies the LTE predicate on the "lock" field.
func LockLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLock, v))
}

// LockContains applies the Contains predicate on the "lock" field.
func LockContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLock, v))
}

// LockHasPrefix applies the HasPrefix predicate on the "lock" field.
func LockHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLock, v))
}

// LockHasSuffix applies the HasSuffix predicate on the "lock" field.
func LockHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLock, v))
}

// LockIsNil applies the IsNil predicate on the "lock" field.
func LockIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLock))
}

// LockNotNil applies the NotNil predicate on the "lock" field.
func LockNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLock))
}

// LockEqualFold applies the EqualFold predicate on the "lock" field.
func LockEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLock, v))
}

// LockContainsFold applies the ContainsFold predicate on the "lock" field.
func LockContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLock, v))
}

// DateCreatedEQ applies the EQ predicate on the "date_created" field.
func DateCreatedEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDateCreated, v))
}

// DateCreatedNEQ applies the NEQ predicate on the "date_created" field.
func DateCreatedNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDateCreated, v))
}

// DateCreatedIn applies the In predicate on the "date_created" field.
func DateCreatedIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldDateCreated, vs...))
}

// DateCreatedNotIn applies the NotIn predicate on the "date_created" field.
func DateCreatedNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDateCreated, vs...))
}

// DateCreatedGT applies the GT predicate on the "date_created" field.
func DateCreatedGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldDateCreated, v))
}

// DateCreatedGTE applies the GTE predicate on the "date_created" field.
func DateCreatedGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDateCreated, v))
}

// DateCreatedLT applies the LT predicate on the "date_created" field.
func DateCreatedLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldDateCreated, v))
}

// DateCreatedLTE applies the LTE predicate on the "date_created" field.
func DateCreatedLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDateCreated, v))
}

// DateCreatedIsNil applies the IsNil predicate on the "date_created" field.
func DateCreatedIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDateCreated))
}

// DateCreatedNotNil applies the NotNil predicate on the "date_created" field.
func DateCreatedNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDateCreated))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
