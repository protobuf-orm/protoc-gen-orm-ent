// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/protobuf-orm/protoc-gen-orm-ent/internal/apptest/ent/predicate"
	"github.com/protobuf-orm/protoc-gen-orm-ent/internal/apptest/ent/tenant"
	"github.com/protobuf-orm/protoc-gen-orm-ent/internal/apptest/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAlias sets the "alias" field.
func (_u *UserUpdate) SetAlias(v string) *UserUpdate {
	_u.mutation.SetAlias(v)
	return _u
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (_u *UserUpdate) SetNillableAlias(v *string) *UserUpdate {
	if v != nil {
		_u.SetAlias(*v)
	}
	return _u
}

// ClearAlias clears the value of the "alias" field.
func (_u *UserUpdate) ClearAlias() *UserUpdate {
	_u.mutation.ClearAlias()
	return _u
}

// SetName sets the "name" field.
func (_u *UserUpdate) SetName(v string) *UserUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableName(v *string) *UserUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *UserUpdate) ClearName() *UserUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetLabels sets the "labels" field.
func (_u *UserUpdate) SetLabels(v map[string]string) *UserUpdate {
	_u.mutation.SetLabels(v)
	return _u
}

// SetLock sets the "lock" field.
func (_u *UserUpdate) SetLock(v string) *UserUpdate {
	_u.mutation.SetLock(v)
	return _u
}

// SetNillableLock sets the "lock" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLock(v *string) *UserUpdate {
	if v != nil {
		_u.SetLock(*v)
	}
	return _u
}

// ClearLock clears the value of the "lock" field.
func (_u *UserUpdate) ClearLock() *UserUpdate {
	_u.mutation.ClearLock()
	return _u
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (_u *UserUpdate) SetTenantID(id uuid.UUID) *UserUpdate {
	_u.mutation.SetTenantID(id)
	return _u
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (_u *UserUpdate) SetTenant(v *Tenant) *UserUpdate {
	return _u.SetTenantID(v.ID)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (_u *UserUpdate) ClearTenant() *UserUpdate {
	_u.mutation.ClearTenant()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdate) check() error {
	if _u.mutation.TenantCleared() && len(_u.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "User.tenant"`)
	}
	return nil
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Alias(); ok {
		_spec.SetField(user.FieldAlias, field.TypeString, value)
	}
	if _u.mutation.AliasCleared() {
		_spec.ClearField(user.FieldAlias, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Labels(); ok {
		_spec.SetField(user.FieldLabels, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Lock(); ok {
		_spec.SetField(user.FieldLock, field.TypeString, value)
	}
	if _u.mutation.LockCleared() {
		_spec.ClearField(user.FieldLock, field.TypeString)
	}
	if _u.mutation.DateCreatedCleared() {
		_spec.ClearField(user.FieldDateCreated, field.TypeTime)
	}
	if _u.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetAlias sets the "alias" field.
func (_u *UserUpdateOne) SetAlias(v string) *UserUpdateOne {
	_u.mutation.SetAlias(v)
	return _u
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableAlias(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetAlias(*v)
	}
	return _u
}

// ClearAlias clears the value of the "alias" field.
func (_u *UserUpdateOne) ClearAlias() *UserUpdateOne {
	_u.mutation.ClearAlias()
	return _u
}

// SetName sets the "name" field.
func (_u *UserUpdateOne) SetName(v string) *UserUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *UserUpdateOne) ClearName() *UserUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetLabels sets the "labels" field.
func (_u *UserUpdateOne) SetLabels(v map[string]string) *UserUpdateOne {
	_u.mutation.SetLabels(v)
	return _u
}

// SetLock sets the "lock" field.
func (_u *UserUpdateOne) SetLock(v string) *UserUpdateOne {
	_u.mutation.SetLock(v)
	return _u
}

// SetNillableLock sets the "lock" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLock(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetLock(*v)
	}
	return _u
}

// ClearLock clears the value of the "lock" field.
func (_u *UserUpdateOne) ClearLock() *UserUpdateOne {
	_u.mutation.ClearLock()
	return _u
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (_u *UserUpdateOne) SetTenantID(id uuid.UUID) *UserUpdateOne {
	_u.mutation.SetTenantID(id)
	return _u
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (_u *UserUpdateOne) SetTenant(v *Tenant) *UserUpdateOne {
	return _u.SetTenantID(v.ID)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (_u *UserUpdateOne) ClearTenant() *UserUpdateOne {
	_u.mutation.ClearTenant()
	return _u
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdateOne) check() error {
	if _u.mutation.TenantCleared() && len(_u.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "User.tenant"`)
	}
	return nil
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Alias(); ok {
		_spec.SetField(user.FieldAlias, field.TypeString, value)
	}
	if _u.mutation.AliasCleared() {
		_spec.ClearField(user.FieldAlias, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Labels(); ok {
		_spec.SetField(user.FieldLabels, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Lock(); ok {
		_spec.SetField(user.FieldLock, field.TypeString, value)
	}
	if _u.mutation.LockCleared() {
		_spec.ClearField(user.FieldLock, field.TypeString)
	}
	if _u.mutation.DateCreatedCleared() {
		_spec.ClearField(user.FieldDateCreated, field.TypeTime)
	}
	if _u.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
