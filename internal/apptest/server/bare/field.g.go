// Code generated by protoc-gen-orm-ent. DO NOT EDIT.
// source: apptest/field.proto

package bare

import (
	context "context"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	apptest "github.com/protobuf-orm/protoc-gen-orm-ent/internal/apptest"
	ent "github.com/protobuf-orm/protoc-gen-orm-ent/internal/apptest/ent"
	mapfield "github.com/protobuf-orm/protoc-gen-orm-ent/internal/apptest/ent/mapfield"
	messagefield "github.com/protobuf-orm/protoc-gen-orm-ent/internal/apptest/ent/messagefield"
	predicate "github.com/protobuf-orm/protoc-gen-orm-ent/internal/apptest/ent/predicate"
	valuefield "github.com/protobuf-orm/protoc-gen-orm-ent/internal/apptest/ent/valuefield"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type ValueFieldServiceServer struct {
	Db *ent.Client
	apptest.UnimplementedValueFieldServiceServer
}

func NewValueFieldServiceServer(db *ent.Client) apptest.ValueFieldServiceServer {
	return ValueFieldServiceServer{Db: db}
}

func (s ValueFieldServiceServer) Add(ctx context.Context, req *apptest.ValueFieldAddRequest) (*apptest.ValueField, error) {
	q := s.Db.ValueField.Create()
	if req.HasId() {
		q.SetID(req.GetId())
	}
	q.SetImplicitF64(req.GetImplicitF64())
	q.SetImplicitF32(req.GetImplicitF32())
	q.SetImplicitI32(req.GetImplicitI32())
	q.SetImplicitI64(req.GetImplicitI64())
	q.SetImplicitU32(req.GetImplicitU32())
	q.SetImplicitU64(req.GetImplicitU64())
	q.SetImplicitSi32(req.GetImplicitSi32())
	q.SetImplicitSi64(req.GetImplicitSi64())
	q.SetImplicitFi32(req.GetImplicitFi32())
	q.SetImplicitFi64(req.GetImplicitFi64())
	q.SetImplicitSfi32(req.GetImplicitSfi32())
	q.SetImplicitSfi64(req.GetImplicitSfi64())
	q.SetImplicitBool(req.GetImplicitBool())
	q.SetImplicitString(req.GetImplicitString())
	q.SetImplicitBytes(req.GetImplicitBytes())
	q.SetImplicitEnum(int32(req.GetImplicitEnum()))
	if req.HasExplicitF64() {
		q.SetExplicitF64(req.GetExplicitF64())
	}
	if req.HasExplicitF32() {
		q.SetExplicitF32(req.GetExplicitF32())
	}
	if req.HasExplicitI32() {
		q.SetExplicitI32(req.GetExplicitI32())
	}
	if req.HasExplicitI64() {
		q.SetExplicitI64(req.GetExplicitI64())
	}
	if req.HasExplicitU32() {
		q.SetExplicitU32(req.GetExplicitU32())
	}
	if req.HasExplicitU64() {
		q.SetExplicitU64(req.GetExplicitU64())
	}
	if req.HasExplicitSi32() {
		q.SetExplicitSi32(req.GetExplicitSi32())
	}
	if req.HasExplicitSi64() {
		q.SetExplicitSi64(req.GetExplicitSi64())
	}
	if req.HasExplicitFi32() {
		q.SetExplicitFi32(req.GetExplicitFi32())
	}
	if req.HasExplicitFi64() {
		q.SetExplicitFi64(req.GetExplicitFi64())
	}
	if req.HasExplicitSfi32() {
		q.SetExplicitSfi32(req.GetExplicitSfi32())
	}
	if req.HasExplicitSfi64() {
		q.SetExplicitSfi64(req.GetExplicitSfi64())
	}
	if req.HasExplicitBool() {
		q.SetExplicitBool(req.GetExplicitBool())
	}
	if req.HasExplicitString() {
		q.SetExplicitString(req.GetExplicitString())
	}
	if req.HasExplicitBytes() {
		q.SetExplicitBytes(req.GetExplicitBytes())
	}
	if req.HasExplicitEnum() {
		q.SetExplicitEnum(int32(req.GetExplicitEnum()))
	}
	if u := req.GetImplicitF64S(); len(u) > 0 {
		q.SetImplicitF64s(u)
	}
	if u := req.GetImplicitF32S(); len(u) > 0 {
		q.SetImplicitF32s(u)
	}
	if u := req.GetImplicitI32S(); len(u) > 0 {
		q.SetImplicitI32s(u)
	}
	if u := req.GetImplicitI64S(); len(u) > 0 {
		q.SetImplicitI64s(u)
	}
	if u := req.GetImplicitU32S(); len(u) > 0 {
		q.SetImplicitU32s(u)
	}
	if u := req.GetImplicitU64S(); len(u) > 0 {
		q.SetImplicitU64s(u)
	}
	if u := req.GetImplicitSi32S(); len(u) > 0 {
		q.SetImplicitSi32s(u)
	}
	if u := req.GetImplicitSi64S(); len(u) > 0 {
		q.SetImplicitSi64s(u)
	}
	if u := req.GetImplicitFi32S(); len(u) > 0 {
		q.SetImplicitFi32s(u)
	}
	if u := req.GetImplicitFi64S(); len(u) > 0 {
		q.SetImplicitFi64s(u)
	}
	if u := req.GetImplicitSfi32S(); len(u) > 0 {
		q.SetImplicitSfi32s(u)
	}
	if u := req.GetImplicitSfi64S(); len(u) > 0 {
		q.SetImplicitSfi64s(u)
	}
	if u := req.GetImplicitBools(); len(u) > 0 {
		q.SetImplicitBools(u)
	}
	if u := req.GetImplicitStrings(); len(u) > 0 {
		q.SetImplicitStrings(u)
	}
	if u := req.GetImplicitBytess(); len(u) > 0 {
		q.SetImplicitBytess(u)
	}
	if u := req.GetImplicitLevels(); len(u) > 0 {
		q.SetImplicitLevels(u)
	}
	if req.HasNullableF64() {
		q.SetNullableF64(req.GetNullableF64())
	}
	if req.HasNullableF32() {
		q.SetNullableF32(req.GetNullableF32())
	}
	if req.HasNullableI32() {
		q.SetNullableI32(req.GetNullableI32())
	}
	if req.HasNullableI64() {
		q.SetNullableI64(req.GetNullableI64())
	}
	if req.HasNullableU32() {
		q.SetNullableU32(req.GetNullableU32())
	}
	if req.HasNullableU64() {
		q.SetNullableU64(req.GetNullableU64())
	}
	if req.HasNullableSi32() {
		q.SetNullableSi32(req.GetNullableSi32())
	}
	if req.HasNullableSi64() {
		q.SetNullableSi64(req.GetNullableSi64())
	}
	if req.HasNullableFi32() {
		q.SetNullableFi32(req.GetNullableFi32())
	}
	if req.HasNullableFi64() {
		q.SetNullableFi64(req.GetNullableFi64())
	}
	if req.HasNullableSfi32() {
		q.SetNullableSfi32(req.GetNullableSfi32())
	}
	if req.HasNullableSfi64() {
		q.SetNullableSfi64(req.GetNullableSfi64())
	}
	if req.HasNullableBool() {
		q.SetNullableBool(req.GetNullableBool())
	}
	if req.HasNullableString() {
		q.SetNullableString(req.GetNullableString())
	}
	if req.HasNullableBytes() {
		q.SetNullableBytes(req.GetNullableBytes())
	}
	if req.HasNullableLevel() {
		q.SetNullableLevel(int32(req.GetNullableLevel()))
	}
	if req.HasImplicitF64WithDefault() {
		q.SetImplicitF64WithDefault(req.GetImplicitF64WithDefault())
	} else {
		q.SetImplicitF64WithDefault(0)
	}
	if req.HasImplicitF32WithDefault() {
		q.SetImplicitF32WithDefault(req.GetImplicitF32WithDefault())
	} else {
		q.SetImplicitF32WithDefault(0)
	}
	if req.HasImplicitI32WithDefault() {
		q.SetImplicitI32WithDefault(req.GetImplicitI32WithDefault())
	} else {
		q.SetImplicitI32WithDefault(0)
	}
	if req.HasImplicitI64WithDefault() {
		q.SetImplicitI64WithDefault(req.GetImplicitI64WithDefault())
	} else {
		q.SetImplicitI64WithDefault(0)
	}
	if req.HasImplicitU32WithDefault() {
		q.SetImplicitU32WithDefault(req.GetImplicitU32WithDefault())
	} else {
		q.SetImplicitU32WithDefault(0)
	}
	if req.HasImplicitU64WithDefault() {
		q.SetImplicitU64WithDefault(req.GetImplicitU64WithDefault())
	} else {
		q.SetImplicitU64WithDefault(0)
	}
	if req.HasImplicitSi32WithDefault() {
		q.SetImplicitSi32WithDefault(req.GetImplicitSi32WithDefault())
	} else {
		q.SetImplicitSi32WithDefault(0)
	}
	if req.HasImplicitSi64WithDefault() {
		q.SetImplicitSi64WithDefault(req.GetImplicitSi64WithDefault())
	} else {
		q.SetImplicitSi64WithDefault(0)
	}
	if req.HasImplicitFi32WithDefault() {
		q.SetImplicitFi32WithDefault(req.GetImplicitFi32WithDefault())
	} else {
		q.SetImplicitFi32WithDefault(0)
	}
	if req.HasImplicitFi64WithDefault() {
		q.SetImplicitFi64WithDefault(req.GetImplicitFi64WithDefault())
	} else {
		q.SetImplicitFi64WithDefault(0)
	}
	if req.HasImplicitSfi32WithDefault() {
		q.SetImplicitSfi32WithDefault(req.GetImplicitSfi32WithDefault())
	} else {
		q.SetImplicitSfi32WithDefault(0)
	}
	if req.HasImplicitSfi64WithDefault() {
		q.SetImplicitSfi64WithDefault(req.GetImplicitSfi64WithDefault())
	} else {
		q.SetImplicitSfi64WithDefault(0)
	}
	if req.HasImplicitBoolWithDefault() {
		q.SetImplicitBoolWithDefault(req.GetImplicitBoolWithDefault())
	} else {
		q.SetImplicitBoolWithDefault(false)
	}
	if req.HasImplicitStringWithDefault() {
		q.SetImplicitStringWithDefault(req.GetImplicitStringWithDefault())
	} else {
		q.SetImplicitStringWithDefault("")
	}
	if req.HasImplicitBytesWithDefault() {
		q.SetImplicitBytesWithDefault(req.GetImplicitBytesWithDefault())
	} else {
		q.SetImplicitBytesWithDefault([]byte{})
	}
	if req.HasImplicitLevelWithDefault() {
		q.SetImplicitLevelWithDefault(int32(req.GetImplicitLevelWithDefault()))
	} else {
		q.SetImplicitLevelWithDefault(0)
	}
	if req.HasExplicitF64WithDefault() {
		q.SetExplicitF64WithDefault(req.GetExplicitF64WithDefault())
	} else {
		q.SetExplicitF64WithDefault(0)
	}
	if req.HasExplicitF32WithDefault() {
		q.SetExplicitF32WithDefault(req.GetExplicitF32WithDefault())
	} else {
		q.SetExplicitF32WithDefault(0)
	}
	if req.HasExplicitI32WithDefault() {
		q.SetExplicitI32WithDefault(req.GetExplicitI32WithDefault())
	} else {
		q.SetExplicitI32WithDefault(0)
	}
	if req.HasExplicitI64WithDefault() {
		q.SetExplicitI64WithDefault(req.GetExplicitI64WithDefault())
	} else {
		q.SetExplicitI64WithDefault(0)
	}
	if req.HasExplicitU32WithDefault() {
		q.SetExplicitU32WithDefault(req.GetExplicitU32WithDefault())
	} else {
		q.SetExplicitU32WithDefault(0)
	}
	if req.HasExplicitU64WithDefault() {
		q.SetExplicitU64WithDefault(req.GetExplicitU64WithDefault())
	} else {
		q.SetExplicitU64WithDefault(0)
	}
	if req.HasExplicitSi32WithDefault() {
		q.SetExplicitSi32WithDefault(req.GetExplicitSi32WithDefault())
	} else {
		q.SetExplicitSi32WithDefault(0)
	}
	if req.HasExplicitSi64WithDefault() {
		q.SetExplicitSi64WithDefault(req.GetExplicitSi64WithDefault())
	} else {
		q.SetExplicitSi64WithDefault(0)
	}
	if req.HasExplicitFi32WithDefault() {
		q.SetExplicitFi32WithDefault(req.GetExplicitFi32WithDefault())
	} else {
		q.SetExplicitFi32WithDefault(0)
	}
	if req.HasExplicitFi64WithDefault() {
		q.SetExplicitFi64WithDefault(req.GetExplicitFi64WithDefault())
	} else {
		q.SetExplicitFi64WithDefault(0)
	}
	if req.HasExplicitSfi32WithDefault() {
		q.SetExplicitSfi32WithDefault(req.GetExplicitSfi32WithDefault())
	} else {
		q.SetExplicitSfi32WithDefault(0)
	}
	if req.HasExplicitSfi64WithDefault() {
		q.SetExplicitSfi64WithDefault(req.GetExplicitSfi64WithDefault())
	} else {
		q.SetExplicitSfi64WithDefault(0)
	}
	if req.HasExplicitBoolWithDefault() {
		q.SetExplicitBoolWithDefault(req.GetExplicitBoolWithDefault())
	} else {
		q.SetExplicitBoolWithDefault(false)
	}
	if req.HasExplicitStringWithDefault() {
		q.SetExplicitStringWithDefault(req.GetExplicitStringWithDefault())
	} else {
		q.SetExplicitStringWithDefault("")
	}
	if req.HasExplicitBytesWithDefault() {
		q.SetExplicitBytesWithDefault(req.GetExplicitBytesWithDefault())
	} else {
		q.SetExplicitBytesWithDefault([]byte{})
	}
	if req.HasExplicitLevelWithDefault() {
		q.SetExplicitLevelWithDefault(int32(req.GetExplicitLevelWithDefault()))
	} else {
		q.SetExplicitLevelWithDefault(0)
	}
	q.SetImplicitImmutableF64(req.GetImplicitImmutableF64())
	q.SetImplicitImmutableF32(req.GetImplicitImmutableF32())
	q.SetImplicitImmutableI32(req.GetImplicitImmutableI32())
	q.SetImplicitImmutableI64(req.GetImplicitImmutableI64())
	q.SetImplicitImmutableU32(req.GetImplicitImmutableU32())
	q.SetImplicitImmutableU64(req.GetImplicitImmutableU64())
	q.SetImplicitImmutableSi32(req.GetImplicitImmutableSi32())
	q.SetImplicitImmutableSi64(req.GetImplicitImmutableSi64())
	q.SetImplicitImmutableFi32(req.GetImplicitImmutableFi32())
	q.SetImplicitImmutableFi64(req.GetImplicitImmutableFi64())
	q.SetImplicitImmutableSfi32(req.GetImplicitImmutableSfi32())
	q.SetImplicitImmutableSfi64(req.GetImplicitImmutableSfi64())
	q.SetImplicitImmutableBool(req.GetImplicitImmutableBool())
	q.SetImplicitImmutableString(req.GetImplicitImmutableString())
	q.SetImplicitImmutableBytes(req.GetImplicitImmutableBytes())
	q.SetImplicitImmutableLevel(int32(req.GetImplicitImmutableLevel()))
	if req.HasExplicitImmutableF64() {
		q.SetExplicitImmutableF64(req.GetExplicitImmutableF64())
	}
	if req.HasExplicitImmutableF32() {
		q.SetExplicitImmutableF32(req.GetExplicitImmutableF32())
	}
	if req.HasExplicitImmutableI32() {
		q.SetExplicitImmutableI32(req.GetExplicitImmutableI32())
	}
	if req.HasExplicitImmutableI64() {
		q.SetExplicitImmutableI64(req.GetExplicitImmutableI64())
	}
	if req.HasExplicitImmutableU32() {
		q.SetExplicitImmutableU32(req.GetExplicitImmutableU32())
	}
	if req.HasExplicitImmutableU64() {
		q.SetExplicitImmutableU64(req.GetExplicitImmutableU64())
	}
	if req.HasExplicitImmutableSi32() {
		q.SetExplicitImmutableSi32(req.GetExplicitImmutableSi32())
	}
	if req.HasExplicitImmutableSi64() {
		q.SetExplicitImmutableSi64(req.GetExplicitImmutableSi64())
	}
	if req.HasExplicitImmutableFi32() {
		q.SetExplicitImmutableFi32(req.GetExplicitImmutableFi32())
	}
	if req.HasExplicitImmutableFi64() {
		q.SetExplicitImmutableFi64(req.GetExplicitImmutableFi64())
	}
	if req.HasExplicitImmutableSfi32() {
		q.SetExplicitImmutableSfi32(req.GetExplicitImmutableSfi32())
	}
	if req.HasExplicitImmutableSfi64() {
		q.SetExplicitImmutableSfi64(req.GetExplicitImmutableSfi64())
	}
	if req.HasExplicitImmutableBool() {
		q.SetExplicitImmutableBool(req.GetExplicitImmutableBool())
	}
	if req.HasExplicitImmutableString() {
		q.SetExplicitImmutableString(req.GetExplicitImmutableString())
	}
	if req.HasExplicitImmutableBytes() {
		q.SetExplicitImmutableBytes(req.GetExplicitImmutableBytes())
	}
	if req.HasExplicitImmutableLevel() {
		q.SetExplicitImmutableLevel(int32(req.GetExplicitImmutableLevel()))
	}

	u, err := q.Save(ctx)
	if err != nil {
		if err, ok := err.(*ent.ConstraintError); ok && sqlgraph.IsUniqueConstraintError(err) {
			return nil, status.Errorf(codes.AlreadyExists, "ValueField already exists: %s", err.Unwrap())
		}
		return nil, err
	}

	return u.Proto(), nil
}

func (s ValueFieldServiceServer) Get(ctx context.Context, req *apptest.ValueFieldGetRequest) (*apptest.ValueField, error) {
	q := s.Db.ValueField.Query()

	if p, err := ValueFieldPick(req.GetRef()); err != nil {
		return nil, err
	} else {
		q.Where(p)
	}
	ValueFieldSelectInit(q, req.GetSelect())

	v, err := q.Only(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, status.Error(codes.NotFound, "ValueField not found")
		}
		return nil, err
	}
	return v.Proto(), nil
}

func selectValueFieldKey(q *ent.ValueFieldQuery) {
	q.Select(valuefield.FieldID)
}

func ValueFieldSelectedFields(m *apptest.ValueFieldSelect) []string {
	if m.GetAll() {
		return valuefield.Columns
	}

	vs := make([]string, 0, len(valuefield.Columns))
	{
		vs = append(vs, valuefield.FieldID)
	}
	if m.GetImplicitF64() {
		vs = append(vs, valuefield.FieldImplicitF64)
	}
	if m.GetImplicitF32() {
		vs = append(vs, valuefield.FieldImplicitF32)
	}
	if m.GetImplicitI32() {
		vs = append(vs, valuefield.FieldImplicitI32)
	}
	if m.GetImplicitI64() {
		vs = append(vs, valuefield.FieldImplicitI64)
	}
	if m.GetImplicitU32() {
		vs = append(vs, valuefield.FieldImplicitU32)
	}
	if m.GetImplicitU64() {
		vs = append(vs, valuefield.FieldImplicitU64)
	}
	if m.GetImplicitSi32() {
		vs = append(vs, valuefield.FieldImplicitSi32)
	}
	if m.GetImplicitSi64() {
		vs = append(vs, valuefield.FieldImplicitSi64)
	}
	if m.GetImplicitFi32() {
		vs = append(vs, valuefield.FieldImplicitFi32)
	}
	if m.GetImplicitFi64() {
		vs = append(vs, valuefield.FieldImplicitFi64)
	}
	if m.GetImplicitSfi32() {
		vs = append(vs, valuefield.FieldImplicitSfi32)
	}
	if m.GetImplicitSfi64() {
		vs = append(vs, valuefield.FieldImplicitSfi64)
	}
	if m.GetImplicitBool() {
		vs = append(vs, valuefield.FieldImplicitBool)
	}
	if m.GetImplicitString() {
		vs = append(vs, valuefield.FieldImplicitString)
	}
	if m.GetImplicitBytes() {
		vs = append(vs, valuefield.FieldImplicitBytes)
	}
	if m.GetImplicitEnum() {
		vs = append(vs, valuefield.FieldImplicitEnum)
	}
	if m.GetExplicitF64() {
		vs = append(vs, valuefield.FieldExplicitF64)
	}
	if m.GetExplicitF32() {
		vs = append(vs, valuefield.FieldExplicitF32)
	}
	if m.GetExplicitI32() {
		vs = append(vs, valuefield.FieldExplicitI32)
	}
	if m.GetExplicitI64() {
		vs = append(vs, valuefield.FieldExplicitI64)
	}
	if m.GetExplicitU32() {
		vs = append(vs, valuefield.FieldExplicitU32)
	}
	if m.GetExplicitU64() {
		vs = append(vs, valuefield.FieldExplicitU64)
	}
	if m.GetExplicitSi32() {
		vs = append(vs, valuefield.FieldExplicitSi32)
	}
	if m.GetExplicitSi64() {
		vs = append(vs, valuefield.FieldExplicitSi64)
	}
	if m.GetExplicitFi32() {
		vs = append(vs, valuefield.FieldExplicitFi32)
	}
	if m.GetExplicitFi64() {
		vs = append(vs, valuefield.FieldExplicitFi64)
	}
	if m.GetExplicitSfi32() {
		vs = append(vs, valuefield.FieldExplicitSfi32)
	}
	if m.GetExplicitSfi64() {
		vs = append(vs, valuefield.FieldExplicitSfi64)
	}
	if m.GetExplicitBool() {
		vs = append(vs, valuefield.FieldExplicitBool)
	}
	if m.GetExplicitString() {
		vs = append(vs, valuefield.FieldExplicitString)
	}
	if m.GetExplicitBytes() {
		vs = append(vs, valuefield.FieldExplicitBytes)
	}
	if m.GetExplicitEnum() {
		vs = append(vs, valuefield.FieldExplicitEnum)
	}
	if m.GetImplicitF64S() {
		vs = append(vs, valuefield.FieldImplicitF64s)
	}
	if m.GetImplicitF32S() {
		vs = append(vs, valuefield.FieldImplicitF32s)
	}
	if m.GetImplicitI32S() {
		vs = append(vs, valuefield.FieldImplicitI32s)
	}
	if m.GetImplicitI64S() {
		vs = append(vs, valuefield.FieldImplicitI64s)
	}
	if m.GetImplicitU32S() {
		vs = append(vs, valuefield.FieldImplicitU32s)
	}
	if m.GetImplicitU64S() {
		vs = append(vs, valuefield.FieldImplicitU64s)
	}
	if m.GetImplicitSi32S() {
		vs = append(vs, valuefield.FieldImplicitSi32s)
	}
	if m.GetImplicitSi64S() {
		vs = append(vs, valuefield.FieldImplicitSi64s)
	}
	if m.GetImplicitFi32S() {
		vs = append(vs, valuefield.FieldImplicitFi32s)
	}
	if m.GetImplicitFi64S() {
		vs = append(vs, valuefield.FieldImplicitFi64s)
	}
	if m.GetImplicitSfi32S() {
		vs = append(vs, valuefield.FieldImplicitSfi32s)
	}
	if m.GetImplicitSfi64S() {
		vs = append(vs, valuefield.FieldImplicitSfi64s)
	}
	if m.GetImplicitBools() {
		vs = append(vs, valuefield.FieldImplicitBools)
	}
	if m.GetImplicitStrings() {
		vs = append(vs, valuefield.FieldImplicitStrings)
	}
	if m.GetImplicitBytess() {
		vs = append(vs, valuefield.FieldImplicitBytess)
	}
	if m.GetImplicitLevels() {
		vs = append(vs, valuefield.FieldImplicitLevels)
	}
	if m.GetNullableF64() {
		vs = append(vs, valuefield.FieldNullableF64)
	}
	if m.GetNullableF32() {
		vs = append(vs, valuefield.FieldNullableF32)
	}
	if m.GetNullableI32() {
		vs = append(vs, valuefield.FieldNullableI32)
	}
	if m.GetNullableI64() {
		vs = append(vs, valuefield.FieldNullableI64)
	}
	if m.GetNullableU32() {
		vs = append(vs, valuefield.FieldNullableU32)
	}
	if m.GetNullableU64() {
		vs = append(vs, valuefield.FieldNullableU64)
	}
	if m.GetNullableSi32() {
		vs = append(vs, valuefield.FieldNullableSi32)
	}
	if m.GetNullableSi64() {
		vs = append(vs, valuefield.FieldNullableSi64)
	}
	if m.GetNullableFi32() {
		vs = append(vs, valuefield.FieldNullableFi32)
	}
	if m.GetNullableFi64() {
		vs = append(vs, valuefield.FieldNullableFi64)
	}
	if m.GetNullableSfi32() {
		vs = append(vs, valuefield.FieldNullableSfi32)
	}
	if m.GetNullableSfi64() {
		vs = append(vs, valuefield.FieldNullableSfi64)
	}
	if m.GetNullableBool() {
		vs = append(vs, valuefield.FieldNullableBool)
	}
	if m.GetNullableString() {
		vs = append(vs, valuefield.FieldNullableString)
	}
	if m.GetNullableBytes() {
		vs = append(vs, valuefield.FieldNullableBytes)
	}
	if m.GetNullableLevel() {
		vs = append(vs, valuefield.FieldNullableLevel)
	}
	if m.GetImplicitF64WithDefault() {
		vs = append(vs, valuefield.FieldImplicitF64WithDefault)
	}
	if m.GetImplicitF32WithDefault() {
		vs = append(vs, valuefield.FieldImplicitF32WithDefault)
	}
	if m.GetImplicitI32WithDefault() {
		vs = append(vs, valuefield.FieldImplicitI32WithDefault)
	}
	if m.GetImplicitI64WithDefault() {
		vs = append(vs, valuefield.FieldImplicitI64WithDefault)
	}
	if m.GetImplicitU32WithDefault() {
		vs = append(vs, valuefield.FieldImplicitU32WithDefault)
	}
	if m.GetImplicitU64WithDefault() {
		vs = append(vs, valuefield.FieldImplicitU64WithDefault)
	}
	if m.GetImplicitSi32WithDefault() {
		vs = append(vs, valuefield.FieldImplicitSi32WithDefault)
	}
	if m.GetImplicitSi64WithDefault() {
		vs = append(vs, valuefield.FieldImplicitSi64WithDefault)
	}
	if m.GetImplicitFi32WithDefault() {
		vs = append(vs, valuefield.FieldImplicitFi32WithDefault)
	}
	if m.GetImplicitFi64WithDefault() {
		vs = append(vs, valuefield.FieldImplicitFi64WithDefault)
	}
	if m.GetImplicitSfi32WithDefault() {
		vs = append(vs, valuefield.FieldImplicitSfi32WithDefault)
	}
	if m.GetImplicitSfi64WithDefault() {
		vs = append(vs, valuefield.FieldImplicitSfi64WithDefault)
	}
	if m.GetImplicitBoolWithDefault() {
		vs = append(vs, valuefield.FieldImplicitBoolWithDefault)
	}
	if m.GetImplicitStringWithDefault() {
		vs = append(vs, valuefield.FieldImplicitStringWithDefault)
	}
	if m.GetImplicitBytesWithDefault() {
		vs = append(vs, valuefield.FieldImplicitBytesWithDefault)
	}
	if m.GetImplicitLevelWithDefault() {
		vs = append(vs, valuefield.FieldImplicitLevelWithDefault)
	}
	if m.GetExplicitF64WithDefault() {
		vs = append(vs, valuefield.FieldExplicitF64WithDefault)
	}
	if m.GetExplicitF32WithDefault() {
		vs = append(vs, valuefield.FieldExplicitF32WithDefault)
	}
	if m.GetExplicitI32WithDefault() {
		vs = append(vs, valuefield.FieldExplicitI32WithDefault)
	}
	if m.GetExplicitI64WithDefault() {
		vs = append(vs, valuefield.FieldExplicitI64WithDefault)
	}
	if m.GetExplicitU32WithDefault() {
		vs = append(vs, valuefield.FieldExplicitU32WithDefault)
	}
	if m.GetExplicitU64WithDefault() {
		vs = append(vs, valuefield.FieldExplicitU64WithDefault)
	}
	if m.GetExplicitSi32WithDefault() {
		vs = append(vs, valuefield.FieldExplicitSi32WithDefault)
	}
	if m.GetExplicitSi64WithDefault() {
		vs = append(vs, valuefield.FieldExplicitSi64WithDefault)
	}
	if m.GetExplicitFi32WithDefault() {
		vs = append(vs, valuefield.FieldExplicitFi32WithDefault)
	}
	if m.GetExplicitFi64WithDefault() {
		vs = append(vs, valuefield.FieldExplicitFi64WithDefault)
	}
	if m.GetExplicitSfi32WithDefault() {
		vs = append(vs, valuefield.FieldExplicitSfi32WithDefault)
	}
	if m.GetExplicitSfi64WithDefault() {
		vs = append(vs, valuefield.FieldExplicitSfi64WithDefault)
	}
	if m.GetExplicitBoolWithDefault() {
		vs = append(vs, valuefield.FieldExplicitBoolWithDefault)
	}
	if m.GetExplicitStringWithDefault() {
		vs = append(vs, valuefield.FieldExplicitStringWithDefault)
	}
	if m.GetExplicitBytesWithDefault() {
		vs = append(vs, valuefield.FieldExplicitBytesWithDefault)
	}
	if m.GetExplicitLevelWithDefault() {
		vs = append(vs, valuefield.FieldExplicitLevelWithDefault)
	}
	if m.GetImplicitImmutableF64() {
		vs = append(vs, valuefield.FieldImplicitImmutableF64)
	}
	if m.GetImplicitImmutableF32() {
		vs = append(vs, valuefield.FieldImplicitImmutableF32)
	}
	if m.GetImplicitImmutableI32() {
		vs = append(vs, valuefield.FieldImplicitImmutableI32)
	}
	if m.GetImplicitImmutableI64() {
		vs = append(vs, valuefield.FieldImplicitImmutableI64)
	}
	if m.GetImplicitImmutableU32() {
		vs = append(vs, valuefield.FieldImplicitImmutableU32)
	}
	if m.GetImplicitImmutableU64() {
		vs = append(vs, valuefield.FieldImplicitImmutableU64)
	}
	if m.GetImplicitImmutableSi32() {
		vs = append(vs, valuefield.FieldImplicitImmutableSi32)
	}
	if m.GetImplicitImmutableSi64() {
		vs = append(vs, valuefield.FieldImplicitImmutableSi64)
	}
	if m.GetImplicitImmutableFi32() {
		vs = append(vs, valuefield.FieldImplicitImmutableFi32)
	}
	if m.GetImplicitImmutableFi64() {
		vs = append(vs, valuefield.FieldImplicitImmutableFi64)
	}
	if m.GetImplicitImmutableSfi32() {
		vs = append(vs, valuefield.FieldImplicitImmutableSfi32)
	}
	if m.GetImplicitImmutableSfi64() {
		vs = append(vs, valuefield.FieldImplicitImmutableSfi64)
	}
	if m.GetImplicitImmutableBool() {
		vs = append(vs, valuefield.FieldImplicitImmutableBool)
	}
	if m.GetImplicitImmutableString() {
		vs = append(vs, valuefield.FieldImplicitImmutableString)
	}
	if m.GetImplicitImmutableBytes() {
		vs = append(vs, valuefield.FieldImplicitImmutableBytes)
	}
	if m.GetImplicitImmutableLevel() {
		vs = append(vs, valuefield.FieldImplicitImmutableLevel)
	}
	if m.GetExplicitImmutableF64() {
		vs = append(vs, valuefield.FieldExplicitImmutableF64)
	}
	if m.GetExplicitImmutableF32() {
		vs = append(vs, valuefield.FieldExplicitImmutableF32)
	}
	if m.GetExplicitImmutableI32() {
		vs = append(vs, valuefield.FieldExplicitImmutableI32)
	}
	if m.GetExplicitImmutableI64() {
		vs = append(vs, valuefield.FieldExplicitImmutableI64)
	}
	if m.GetExplicitImmutableU32() {
		vs = append(vs, valuefield.FieldExplicitImmutableU32)
	}
	if m.GetExplicitImmutableU64() {
		vs = append(vs, valuefield.FieldExplicitImmutableU64)
	}
	if m.GetExplicitImmutableSi32() {
		vs = append(vs, valuefield.FieldExplicitImmutableSi32)
	}
	if m.GetExplicitImmutableSi64() {
		vs = append(vs, valuefield.FieldExplicitImmutableSi64)
	}
	if m.GetExplicitImmutableFi32() {
		vs = append(vs, valuefield.FieldExplicitImmutableFi32)
	}
	if m.GetExplicitImmutableFi64() {
		vs = append(vs, valuefield.FieldExplicitImmutableFi64)
	}
	if m.GetExplicitImmutableSfi32() {
		vs = append(vs, valuefield.FieldExplicitImmutableSfi32)
	}
	if m.GetExplicitImmutableSfi64() {
		vs = append(vs, valuefield.FieldExplicitImmutableSfi64)
	}
	if m.GetExplicitImmutableBool() {
		vs = append(vs, valuefield.FieldExplicitImmutableBool)
	}
	if m.GetExplicitImmutableString() {
		vs = append(vs, valuefield.FieldExplicitImmutableString)
	}
	if m.GetExplicitImmutableBytes() {
		vs = append(vs, valuefield.FieldExplicitImmutableBytes)
	}
	if m.GetExplicitImmutableLevel() {
		vs = append(vs, valuefield.FieldExplicitImmutableLevel)
	}

	return vs
}

func ValueFieldSelect(q *ent.ValueFieldQuery, m *apptest.ValueFieldSelect) {
	if !m.GetAll() {
		fields := ValueFieldSelectedFields(m)
		q.Select(fields...)
	}
}

func ValueFieldSelectInit(q *ent.ValueFieldQuery, m *apptest.ValueFieldSelect) {
	if m != nil {
		ValueFieldSelect(q, m)
	} else {
	}
}

func (s ValueFieldServiceServer) Patch(ctx context.Context, req *apptest.ValueFieldPatchRequest) (*apptest.ValueField, error) {
	p, err := ValueFieldPick(req.GetTarget())
	if err != nil {
		return nil, err
	}

	q := s.Db.ValueField.Update().Where(p)
	q.SetImplicitF64(req.GetImplicitF64())
	q.SetImplicitF32(req.GetImplicitF32())
	q.SetImplicitI32(req.GetImplicitI32())
	q.SetImplicitI64(req.GetImplicitI64())
	q.SetImplicitU32(req.GetImplicitU32())
	q.SetImplicitU64(req.GetImplicitU64())
	q.SetImplicitSi32(req.GetImplicitSi32())
	q.SetImplicitSi64(req.GetImplicitSi64())
	q.SetImplicitFi32(req.GetImplicitFi32())
	q.SetImplicitFi64(req.GetImplicitFi64())
	q.SetImplicitSfi32(req.GetImplicitSfi32())
	q.SetImplicitSfi64(req.GetImplicitSfi64())
	q.SetImplicitBool(req.GetImplicitBool())
	q.SetImplicitString(req.GetImplicitString())
	q.SetImplicitBytes(req.GetImplicitBytes())
	q.SetImplicitEnum(int32(req.GetImplicitEnum()))
	if req.GetExplicitF64Null() {
		q.ClearExplicitF64()
	} else if req.HasExplicitF64() {
		q.SetExplicitF64(req.GetExplicitF64())
	}
	if req.GetExplicitF32Null() {
		q.ClearExplicitF32()
	} else if req.HasExplicitF32() {
		q.SetExplicitF32(req.GetExplicitF32())
	}
	if req.GetExplicitI32Null() {
		q.ClearExplicitI32()
	} else if req.HasExplicitI32() {
		q.SetExplicitI32(req.GetExplicitI32())
	}
	if req.GetExplicitI64Null() {
		q.ClearExplicitI64()
	} else if req.HasExplicitI64() {
		q.SetExplicitI64(req.GetExplicitI64())
	}
	if req.GetExplicitU32Null() {
		q.ClearExplicitU32()
	} else if req.HasExplicitU32() {
		q.SetExplicitU32(req.GetExplicitU32())
	}
	if req.GetExplicitU64Null() {
		q.ClearExplicitU64()
	} else if req.HasExplicitU64() {
		q.SetExplicitU64(req.GetExplicitU64())
	}
	if req.GetExplicitSi32Null() {
		q.ClearExplicitSi32()
	} else if req.HasExplicitSi32() {
		q.SetExplicitSi32(req.GetExplicitSi32())
	}
	if req.GetExplicitSi64Null() {
		q.ClearExplicitSi64()
	} else if req.HasExplicitSi64() {
		q.SetExplicitSi64(req.GetExplicitSi64())
	}
	if req.GetExplicitFi32Null() {
		q.ClearExplicitFi32()
	} else if req.HasExplicitFi32() {
		q.SetExplicitFi32(req.GetExplicitFi32())
	}
	if req.GetExplicitFi64Null() {
		q.ClearExplicitFi64()
	} else if req.HasExplicitFi64() {
		q.SetExplicitFi64(req.GetExplicitFi64())
	}
	if req.GetExplicitSfi32Null() {
		q.ClearExplicitSfi32()
	} else if req.HasExplicitSfi32() {
		q.SetExplicitSfi32(req.GetExplicitSfi32())
	}
	if req.GetExplicitSfi64Null() {
		q.ClearExplicitSfi64()
	} else if req.HasExplicitSfi64() {
		q.SetExplicitSfi64(req.GetExplicitSfi64())
	}
	if req.GetExplicitBoolNull() {
		q.ClearExplicitBool()
	} else if req.HasExplicitBool() {
		q.SetExplicitBool(req.GetExplicitBool())
	}
	if req.GetExplicitStringNull() {
		q.ClearExplicitString()
	} else if req.HasExplicitString() {
		q.SetExplicitString(req.GetExplicitString())
	}
	if req.GetExplicitBytesNull() {
		q.ClearExplicitBytes()
	} else if req.HasExplicitBytes() {
		q.SetExplicitBytes(req.GetExplicitBytes())
	}
	if req.GetExplicitEnumNull() {
		q.ClearExplicitEnum()
	} else if req.HasExplicitEnum() {
		q.SetExplicitEnum(int32(req.GetExplicitEnum()))
	}
	if u := req.GetImplicitF64S(); len(u) > 0 {
		q.SetImplicitF64s(req.GetImplicitF64S())
	}
	if u := req.GetImplicitF32S(); len(u) > 0 {
		q.SetImplicitF32s(req.GetImplicitF32S())
	}
	if u := req.GetImplicitI32S(); len(u) > 0 {
		q.SetImplicitI32s(req.GetImplicitI32S())
	}
	if u := req.GetImplicitI64S(); len(u) > 0 {
		q.SetImplicitI64s(req.GetImplicitI64S())
	}
	if u := req.GetImplicitU32S(); len(u) > 0 {
		q.SetImplicitU32s(req.GetImplicitU32S())
	}
	if u := req.GetImplicitU64S(); len(u) > 0 {
		q.SetImplicitU64s(req.GetImplicitU64S())
	}
	if u := req.GetImplicitSi32S(); len(u) > 0 {
		q.SetImplicitSi32s(req.GetImplicitSi32S())
	}
	if u := req.GetImplicitSi64S(); len(u) > 0 {
		q.SetImplicitSi64s(req.GetImplicitSi64S())
	}
	if u := req.GetImplicitFi32S(); len(u) > 0 {
		q.SetImplicitFi32s(req.GetImplicitFi32S())
	}
	if u := req.GetImplicitFi64S(); len(u) > 0 {
		q.SetImplicitFi64s(req.GetImplicitFi64S())
	}
	if u := req.GetImplicitSfi32S(); len(u) > 0 {
		q.SetImplicitSfi32s(req.GetImplicitSfi32S())
	}
	if u := req.GetImplicitSfi64S(); len(u) > 0 {
		q.SetImplicitSfi64s(req.GetImplicitSfi64S())
	}
	if u := req.GetImplicitBools(); len(u) > 0 {
		q.SetImplicitBools(req.GetImplicitBools())
	}
	if u := req.GetImplicitStrings(); len(u) > 0 {
		q.SetImplicitStrings(req.GetImplicitStrings())
	}
	if u := req.GetImplicitBytess(); len(u) > 0 {
		q.SetImplicitBytess(req.GetImplicitBytess())
	}
	if u := req.GetImplicitLevels(); len(u) > 0 {
		q.SetImplicitLevels(req.GetImplicitLevels())
	}
	if req.GetNullableF64Null() {
		q.ClearNullableF64()
	} else if req.HasNullableF64() {
		q.SetNullableF64(req.GetNullableF64())
	}
	if req.GetNullableF32Null() {
		q.ClearNullableF32()
	} else if req.HasNullableF32() {
		q.SetNullableF32(req.GetNullableF32())
	}
	if req.GetNullableI32Null() {
		q.ClearNullableI32()
	} else if req.HasNullableI32() {
		q.SetNullableI32(req.GetNullableI32())
	}
	if req.GetNullableI64Null() {
		q.ClearNullableI64()
	} else if req.HasNullableI64() {
		q.SetNullableI64(req.GetNullableI64())
	}
	if req.GetNullableU32Null() {
		q.ClearNullableU32()
	} else if req.HasNullableU32() {
		q.SetNullableU32(req.GetNullableU32())
	}
	if req.GetNullableU64Null() {
		q.ClearNullableU64()
	} else if req.HasNullableU64() {
		q.SetNullableU64(req.GetNullableU64())
	}
	if req.GetNullableSi32Null() {
		q.ClearNullableSi32()
	} else if req.HasNullableSi32() {
		q.SetNullableSi32(req.GetNullableSi32())
	}
	if req.GetNullableSi64Null() {
		q.ClearNullableSi64()
	} else if req.HasNullableSi64() {
		q.SetNullableSi64(req.GetNullableSi64())
	}
	if req.GetNullableFi32Null() {
		q.ClearNullableFi32()
	} else if req.HasNullableFi32() {
		q.SetNullableFi32(req.GetNullableFi32())
	}
	if req.GetNullableFi64Null() {
		q.ClearNullableFi64()
	} else if req.HasNullableFi64() {
		q.SetNullableFi64(req.GetNullableFi64())
	}
	if req.GetNullableSfi32Null() {
		q.ClearNullableSfi32()
	} else if req.HasNullableSfi32() {
		q.SetNullableSfi32(req.GetNullableSfi32())
	}
	if req.GetNullableSfi64Null() {
		q.ClearNullableSfi64()
	} else if req.HasNullableSfi64() {
		q.SetNullableSfi64(req.GetNullableSfi64())
	}
	if req.GetNullableBoolNull() {
		q.ClearNullableBool()
	} else if req.HasNullableBool() {
		q.SetNullableBool(req.GetNullableBool())
	}
	if req.GetNullableStringNull() {
		q.ClearNullableString()
	} else if req.HasNullableString() {
		q.SetNullableString(req.GetNullableString())
	}
	if req.GetNullableBytesNull() {
		q.ClearNullableBytes()
	} else if req.HasNullableBytes() {
		q.SetNullableBytes(req.GetNullableBytes())
	}
	if req.GetNullableLevelNull() {
		q.ClearNullableLevel()
	} else if req.HasNullableLevel() {
		q.SetNullableLevel(int32(req.GetNullableLevel()))
	}
	if req.HasImplicitF64WithDefault() {
		q.SetImplicitF64WithDefault(req.GetImplicitF64WithDefault())
	}
	if req.HasImplicitF32WithDefault() {
		q.SetImplicitF32WithDefault(req.GetImplicitF32WithDefault())
	}
	if req.HasImplicitI32WithDefault() {
		q.SetImplicitI32WithDefault(req.GetImplicitI32WithDefault())
	}
	if req.HasImplicitI64WithDefault() {
		q.SetImplicitI64WithDefault(req.GetImplicitI64WithDefault())
	}
	if req.HasImplicitU32WithDefault() {
		q.SetImplicitU32WithDefault(req.GetImplicitU32WithDefault())
	}
	if req.HasImplicitU64WithDefault() {
		q.SetImplicitU64WithDefault(req.GetImplicitU64WithDefault())
	}
	if req.HasImplicitSi32WithDefault() {
		q.SetImplicitSi32WithDefault(req.GetImplicitSi32WithDefault())
	}
	if req.HasImplicitSi64WithDefault() {
		q.SetImplicitSi64WithDefault(req.GetImplicitSi64WithDefault())
	}
	if req.HasImplicitFi32WithDefault() {
		q.SetImplicitFi32WithDefault(req.GetImplicitFi32WithDefault())
	}
	if req.HasImplicitFi64WithDefault() {
		q.SetImplicitFi64WithDefault(req.GetImplicitFi64WithDefault())
	}
	if req.HasImplicitSfi32WithDefault() {
		q.SetImplicitSfi32WithDefault(req.GetImplicitSfi32WithDefault())
	}
	if req.HasImplicitSfi64WithDefault() {
		q.SetImplicitSfi64WithDefault(req.GetImplicitSfi64WithDefault())
	}
	if req.HasImplicitBoolWithDefault() {
		q.SetImplicitBoolWithDefault(req.GetImplicitBoolWithDefault())
	}
	if req.HasImplicitStringWithDefault() {
		q.SetImplicitStringWithDefault(req.GetImplicitStringWithDefault())
	}
	if req.HasImplicitBytesWithDefault() {
		q.SetImplicitBytesWithDefault(req.GetImplicitBytesWithDefault())
	}
	if req.HasImplicitLevelWithDefault() {
		q.SetImplicitLevelWithDefault(int32(req.GetImplicitLevelWithDefault()))
	}
	if req.GetExplicitF64WithDefaultNull() {
		q.ClearExplicitF64WithDefault()
	} else if req.HasExplicitF64WithDefault() {
		q.SetExplicitF64WithDefault(req.GetExplicitF64WithDefault())
	}
	if req.GetExplicitF32WithDefaultNull() {
		q.ClearExplicitF32WithDefault()
	} else if req.HasExplicitF32WithDefault() {
		q.SetExplicitF32WithDefault(req.GetExplicitF32WithDefault())
	}
	if req.GetExplicitI32WithDefaultNull() {
		q.ClearExplicitI32WithDefault()
	} else if req.HasExplicitI32WithDefault() {
		q.SetExplicitI32WithDefault(req.GetExplicitI32WithDefault())
	}
	if req.GetExplicitI64WithDefaultNull() {
		q.ClearExplicitI64WithDefault()
	} else if req.HasExplicitI64WithDefault() {
		q.SetExplicitI64WithDefault(req.GetExplicitI64WithDefault())
	}
	if req.GetExplicitU32WithDefaultNull() {
		q.ClearExplicitU32WithDefault()
	} else if req.HasExplicitU32WithDefault() {
		q.SetExplicitU32WithDefault(req.GetExplicitU32WithDefault())
	}
	if req.GetExplicitU64WithDefaultNull() {
		q.ClearExplicitU64WithDefault()
	} else if req.HasExplicitU64WithDefault() {
		q.SetExplicitU64WithDefault(req.GetExplicitU64WithDefault())
	}
	if req.GetExplicitSi32WithDefaultNull() {
		q.ClearExplicitSi32WithDefault()
	} else if req.HasExplicitSi32WithDefault() {
		q.SetExplicitSi32WithDefault(req.GetExplicitSi32WithDefault())
	}
	if req.GetExplicitSi64WithDefaultNull() {
		q.ClearExplicitSi64WithDefault()
	} else if req.HasExplicitSi64WithDefault() {
		q.SetExplicitSi64WithDefault(req.GetExplicitSi64WithDefault())
	}
	if req.GetExplicitFi32WithDefaultNull() {
		q.ClearExplicitFi32WithDefault()
	} else if req.HasExplicitFi32WithDefault() {
		q.SetExplicitFi32WithDefault(req.GetExplicitFi32WithDefault())
	}
	if req.GetExplicitFi64WithDefaultNull() {
		q.ClearExplicitFi64WithDefault()
	} else if req.HasExplicitFi64WithDefault() {
		q.SetExplicitFi64WithDefault(req.GetExplicitFi64WithDefault())
	}
	if req.GetExplicitSfi32WithDefaultNull() {
		q.ClearExplicitSfi32WithDefault()
	} else if req.HasExplicitSfi32WithDefault() {
		q.SetExplicitSfi32WithDefault(req.GetExplicitSfi32WithDefault())
	}
	if req.GetExplicitSfi64WithDefaultNull() {
		q.ClearExplicitSfi64WithDefault()
	} else if req.HasExplicitSfi64WithDefault() {
		q.SetExplicitSfi64WithDefault(req.GetExplicitSfi64WithDefault())
	}
	if req.GetExplicitBoolWithDefaultNull() {
		q.ClearExplicitBoolWithDefault()
	} else if req.HasExplicitBoolWithDefault() {
		q.SetExplicitBoolWithDefault(req.GetExplicitBoolWithDefault())
	}
	if req.GetExplicitStringWithDefaultNull() {
		q.ClearExplicitStringWithDefault()
	} else if req.HasExplicitStringWithDefault() {
		q.SetExplicitStringWithDefault(req.GetExplicitStringWithDefault())
	}
	if req.GetExplicitBytesWithDefaultNull() {
		q.ClearExplicitBytesWithDefault()
	} else if req.HasExplicitBytesWithDefault() {
		q.SetExplicitBytesWithDefault(req.GetExplicitBytesWithDefault())
	}
	if req.GetExplicitLevelWithDefaultNull() {
		q.ClearExplicitLevelWithDefault()
	} else if req.HasExplicitLevelWithDefault() {
		q.SetExplicitLevelWithDefault(int32(req.GetExplicitLevelWithDefault()))
	}

	if _, err := q.Save(ctx); err != nil {
		return nil, err
	}

	return nil, nil
}

func ValueFieldGetKey(ctx context.Context, db *ent.Client, ref *apptest.ValueFieldRef) (string, error) {
	var z string
	if ref.HasId() {
		return ref.GetId(), nil
	}

	p, err := ValueFieldPick(ref)
	if err != nil {
		return z, err
	}

	v, err := db.ValueField.Query().Where(p).OnlyID(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return z, status.Error(codes.NotFound, "ValueField not found")
		}
		return z, err
	}

	return v, nil
}

func (s ValueFieldServiceServer) Erase(ctx context.Context, req *apptest.ValueFieldRef) (*emptypb.Empty, error) {
	p, err := ValueFieldPick(req)
	if err != nil {
		return nil, err
	}

	if _, err := s.Db.ValueField.Delete().Where(p).Exec(ctx); err != nil {
		return nil, err
	}
	return nil, nil
}

func ValueFieldPick(req *apptest.ValueFieldRef) (predicate.ValueField, error) {
	switch req.WhichKey() {
	case apptest.ValueFieldRef_Id_case:
		return valuefield.IDEQ(req.GetId()), nil
	case apptest.ValueFieldRef_Key_not_set_case:
		return nil, status.Errorf(codes.InvalidArgument, "key not set")
	default:
		return nil, status.Errorf(codes.Unimplemented, "unknown type of key: %s", req.WhichKey())
	}
}

type MessageFieldServiceServer struct {
	Db *ent.Client
	apptest.UnimplementedMessageFieldServiceServer
}

func NewMessageFieldServiceServer(db *ent.Client) apptest.MessageFieldServiceServer {
	return MessageFieldServiceServer{Db: db}
}

func (s MessageFieldServiceServer) Add(ctx context.Context, req *apptest.MessageFieldAddRequest) (*apptest.MessageField, error) {
	q := s.Db.MessageField.Create()
	if req.HasId() {
		q.SetID(req.GetId())
	}
	if req.HasExplicit() {
		q.SetExplicit(req.GetExplicit())
	}
	if u := req.GetRepeated(); len(u) > 0 {
		q.SetRepeated(u)
	}
	if req.HasNullable() {
		q.SetNullable(req.GetNullable())
	}
	if req.HasExplicitWithDefault() {
		q.SetExplicitWithDefault(req.GetExplicitWithDefault())
	} else {
		q.SetExplicitWithDefault(nil)
	}
	if req.HasExplicitImmutable() {
		q.SetExplicitImmutable(req.GetExplicitImmutable())
	}

	u, err := q.Save(ctx)
	if err != nil {
		if err, ok := err.(*ent.ConstraintError); ok && sqlgraph.IsUniqueConstraintError(err) {
			return nil, status.Errorf(codes.AlreadyExists, "MessageField already exists: %s", err.Unwrap())
		}
		return nil, err
	}

	return u.Proto(), nil
}

func (s MessageFieldServiceServer) Get(ctx context.Context, req *apptest.MessageFieldGetRequest) (*apptest.MessageField, error) {
	q := s.Db.MessageField.Query()

	if p, err := MessageFieldPick(req.GetRef()); err != nil {
		return nil, err
	} else {
		q.Where(p)
	}
	MessageFieldSelectInit(q, req.GetSelect())

	v, err := q.Only(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, status.Error(codes.NotFound, "MessageField not found")
		}
		return nil, err
	}
	return v.Proto(), nil
}

func selectMessageFieldKey(q *ent.MessageFieldQuery) {
	q.Select(messagefield.FieldID)
}

func MessageFieldSelectedFields(m *apptest.MessageFieldSelect) []string {
	if m.GetAll() {
		return messagefield.Columns
	}

	vs := make([]string, 0, len(messagefield.Columns))
	{
		vs = append(vs, messagefield.FieldID)
	}
	if m.GetExplicit() {
		vs = append(vs, messagefield.FieldExplicit)
	}
	if m.GetRepeated() {
		vs = append(vs, messagefield.FieldRepeated)
	}
	if m.GetNullable() {
		vs = append(vs, messagefield.FieldNullable)
	}
	if m.GetExplicitWithDefault() {
		vs = append(vs, messagefield.FieldExplicitWithDefault)
	}
	if m.GetExplicitImmutable() {
		vs = append(vs, messagefield.FieldExplicitImmutable)
	}

	return vs
}

func MessageFieldSelect(q *ent.MessageFieldQuery, m *apptest.MessageFieldSelect) {
	if !m.GetAll() {
		fields := MessageFieldSelectedFields(m)
		q.Select(fields...)
	}
}

func MessageFieldSelectInit(q *ent.MessageFieldQuery, m *apptest.MessageFieldSelect) {
	if m != nil {
		MessageFieldSelect(q, m)
	} else {
	}
}

func (s MessageFieldServiceServer) Patch(ctx context.Context, req *apptest.MessageFieldPatchRequest) (*apptest.MessageField, error) {
	p, err := MessageFieldPick(req.GetTarget())
	if err != nil {
		return nil, err
	}

	q := s.Db.MessageField.Update().Where(p)
	if req.GetExplicitNull() {
		q.ClearExplicit()
	} else if req.HasExplicit() {
		q.SetExplicit(req.GetExplicit())
	}
	if u := req.GetRepeated(); len(u) > 0 {
		q.SetRepeated(req.GetRepeated())
	}
	if req.GetNullableNull() {
		q.ClearNullable()
	} else if req.HasNullable() {
		q.SetNullable(req.GetNullable())
	}
	if req.GetExplicitWithDefaultNull() {
		q.ClearExplicitWithDefault()
	} else if req.HasExplicitWithDefault() {
		q.SetExplicitWithDefault(req.GetExplicitWithDefault())
	}

	if _, err := q.Save(ctx); err != nil {
		return nil, err
	}

	return nil, nil
}

func MessageFieldGetKey(ctx context.Context, db *ent.Client, ref *apptest.MessageFieldRef) (string, error) {
	var z string
	if ref.HasId() {
		return ref.GetId(), nil
	}

	p, err := MessageFieldPick(ref)
	if err != nil {
		return z, err
	}

	v, err := db.MessageField.Query().Where(p).OnlyID(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return z, status.Error(codes.NotFound, "MessageField not found")
		}
		return z, err
	}

	return v, nil
}

func (s MessageFieldServiceServer) Erase(ctx context.Context, req *apptest.MessageFieldRef) (*emptypb.Empty, error) {
	p, err := MessageFieldPick(req)
	if err != nil {
		return nil, err
	}

	if _, err := s.Db.MessageField.Delete().Where(p).Exec(ctx); err != nil {
		return nil, err
	}
	return nil, nil
}

func MessageFieldPick(req *apptest.MessageFieldRef) (predicate.MessageField, error) {
	switch req.WhichKey() {
	case apptest.MessageFieldRef_Id_case:
		return messagefield.IDEQ(req.GetId()), nil
	case apptest.MessageFieldRef_Key_not_set_case:
		return nil, status.Errorf(codes.InvalidArgument, "key not set")
	default:
		return nil, status.Errorf(codes.Unimplemented, "unknown type of key: %s", req.WhichKey())
	}
}

type MapFieldServiceServer struct {
	Db *ent.Client
	apptest.UnimplementedMapFieldServiceServer
}

func NewMapFieldServiceServer(db *ent.Client) apptest.MapFieldServiceServer {
	return MapFieldServiceServer{Db: db}
}

func (s MapFieldServiceServer) Add(ctx context.Context, req *apptest.MapFieldAddRequest) (*apptest.MapField, error) {
	q := s.Db.MapField.Create()
	if req.HasId() {
		q.SetID(req.GetId())
	}
	if u := req.GetImplicitString(); len(u) > 0 {
		q.SetImplicitString(u)
	}
	if u := req.GetImplicitEnum(); len(u) > 0 {
		q.SetImplicitEnum(u)
	}
	if u := req.GetImplicitJson(); len(u) > 0 {
		q.SetImplicitJSON(u)
	}
	if u := req.GetImplicitStringWithDefault(); len(u) > 0 {
		q.SetImplicitStringWithDefault(u)
	} else {
		q.SetImplicitStringWithDefault(nil)
	}
	if u := req.GetImplicitEnumWithDefault(); len(u) > 0 {
		q.SetImplicitEnumWithDefault(u)
	} else {
		q.SetImplicitEnumWithDefault(nil)
	}
	if u := req.GetImplicitJsonWithDefault(); len(u) > 0 {
		q.SetImplicitJSONWithDefault(u)
	} else {
		q.SetImplicitJSONWithDefault(nil)
	}
	if u := req.GetImplicitImmutableString(); len(u) > 0 {
		q.SetImplicitImmutableString(u)
	}
	if u := req.GetImplicitImmutableEnum(); len(u) > 0 {
		q.SetImplicitImmutableEnum(u)
	}
	if u := req.GetImplicitImmutableJson(); len(u) > 0 {
		q.SetImplicitImmutableJSON(u)
	}

	u, err := q.Save(ctx)
	if err != nil {
		if err, ok := err.(*ent.ConstraintError); ok && sqlgraph.IsUniqueConstraintError(err) {
			return nil, status.Errorf(codes.AlreadyExists, "MapField already exists: %s", err.Unwrap())
		}
		return nil, err
	}

	return u.Proto(), nil
}

func (s MapFieldServiceServer) Get(ctx context.Context, req *apptest.MapFieldGetRequest) (*apptest.MapField, error) {
	q := s.Db.MapField.Query()

	if p, err := MapFieldPick(req.GetRef()); err != nil {
		return nil, err
	} else {
		q.Where(p)
	}
	MapFieldSelectInit(q, req.GetSelect())

	v, err := q.Only(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, status.Error(codes.NotFound, "MapField not found")
		}
		return nil, err
	}
	return v.Proto(), nil
}

func selectMapFieldKey(q *ent.MapFieldQuery) {
	q.Select(mapfield.FieldID)
}

func MapFieldSelectedFields(m *apptest.MapFieldSelect) []string {
	if m.GetAll() {
		return mapfield.Columns
	}

	vs := make([]string, 0, len(mapfield.Columns))
	{
		vs = append(vs, mapfield.FieldID)
	}
	if m.GetImplicitString() {
		vs = append(vs, mapfield.FieldImplicitString)
	}
	if m.GetImplicitEnum() {
		vs = append(vs, mapfield.FieldImplicitEnum)
	}
	if m.GetImplicitJson() {
		vs = append(vs, mapfield.FieldImplicitJSON)
	}
	if m.GetImplicitStringWithDefault() {
		vs = append(vs, mapfield.FieldImplicitStringWithDefault)
	}
	if m.GetImplicitEnumWithDefault() {
		vs = append(vs, mapfield.FieldImplicitEnumWithDefault)
	}
	if m.GetImplicitJsonWithDefault() {
		vs = append(vs, mapfield.FieldImplicitJSONWithDefault)
	}
	if m.GetImplicitImmutableString() {
		vs = append(vs, mapfield.FieldImplicitImmutableString)
	}
	if m.GetImplicitImmutableEnum() {
		vs = append(vs, mapfield.FieldImplicitImmutableEnum)
	}
	if m.GetImplicitImmutableJson() {
		vs = append(vs, mapfield.FieldImplicitImmutableJSON)
	}

	return vs
}

func MapFieldSelect(q *ent.MapFieldQuery, m *apptest.MapFieldSelect) {
	if !m.GetAll() {
		fields := MapFieldSelectedFields(m)
		q.Select(fields...)
	}
}

func MapFieldSelectInit(q *ent.MapFieldQuery, m *apptest.MapFieldSelect) {
	if m != nil {
		MapFieldSelect(q, m)
	} else {
	}
}

func (s MapFieldServiceServer) Patch(ctx context.Context, req *apptest.MapFieldPatchRequest) (*apptest.MapField, error) {
	p, err := MapFieldPick(req.GetTarget())
	if err != nil {
		return nil, err
	}

	q := s.Db.MapField.Update().Where(p)
	if u := req.GetImplicitString(); len(u) > 0 {
		q.SetImplicitString(req.GetImplicitString())
	}
	if u := req.GetImplicitEnum(); len(u) > 0 {
		q.SetImplicitEnum(req.GetImplicitEnum())
	}
	if u := req.GetImplicitJson(); len(u) > 0 {
		q.SetImplicitJSON(req.GetImplicitJson())
	}
	if u := req.GetImplicitStringWithDefault(); len(u) > 0 {
		q.SetImplicitStringWithDefault(req.GetImplicitStringWithDefault())
	}
	if u := req.GetImplicitEnumWithDefault(); len(u) > 0 {
		q.SetImplicitEnumWithDefault(req.GetImplicitEnumWithDefault())
	}
	if u := req.GetImplicitJsonWithDefault(); len(u) > 0 {
		q.SetImplicitJSONWithDefault(req.GetImplicitJsonWithDefault())
	}

	if _, err := q.Save(ctx); err != nil {
		return nil, err
	}

	return nil, nil
}

func MapFieldGetKey(ctx context.Context, db *ent.Client, ref *apptest.MapFieldRef) (string, error) {
	var z string
	if ref.HasId() {
		return ref.GetId(), nil
	}

	p, err := MapFieldPick(ref)
	if err != nil {
		return z, err
	}

	v, err := db.MapField.Query().Where(p).OnlyID(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return z, status.Error(codes.NotFound, "MapField not found")
		}
		return z, err
	}

	return v, nil
}

func (s MapFieldServiceServer) Erase(ctx context.Context, req *apptest.MapFieldRef) (*emptypb.Empty, error) {
	p, err := MapFieldPick(req)
	if err != nil {
		return nil, err
	}

	if _, err := s.Db.MapField.Delete().Where(p).Exec(ctx); err != nil {
		return nil, err
	}
	return nil, nil
}

func MapFieldPick(req *apptest.MapFieldRef) (predicate.MapField, error) {
	switch req.WhichKey() {
	case apptest.MapFieldRef_Id_case:
		return mapfield.IDEQ(req.GetId()), nil
	case apptest.MapFieldRef_Key_not_set_case:
		return nil, status.Errorf(codes.InvalidArgument, "key not set")
	default:
		return nil, status.Errorf(codes.Unimplemented, "unknown type of key: %s", req.WhichKey())
	}
}
