// Code generated by protoc-gen-orm-ent. DO NOT EDIT.
// source: apptest/user.proto

package ent

import (
	context "context"
	uuid "github.com/google/uuid"
	apptest "github.com/protobuf-orm/protoc-gen-orm-ent/internal/apptest"
	ent "github.com/protobuf-orm/protoc-gen-orm-ent/internal/apptest/ent"
	predicate "github.com/protobuf-orm/protoc-gen-orm-ent/internal/apptest/ent/predicate"
	user "github.com/protobuf-orm/protoc-gen-orm-ent/internal/apptest/ent/user"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

type UserServiceServer struct {
	Db *ent.Client
	apptest.UnimplementedUserServiceServer
}

func NewUserServiceServer(db *ent.Client) UserServiceServer {
	return UserServiceServer{Db: db}
}

func (s UserServiceServer) Add(ctx context.Context, req *apptest.UserAddRequest) (*apptest.User, error) {
	q := s.Db.User.Create()
	if v, err := uuid.FromBytes(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
	} else {
		q.SetID(v)
	}
	if req.HasAlias() {
		q.SetAlias(req.GetAlias())
	}
	if req.HasName() {
		q.SetName(req.GetName())
	}
	q.SetLabels(req.GetLabels())
	if req.HasDateCreated() {
		q.SetDateCreated(req.GetDateCreated().AsTime())
	}

	v, err := q.Save(ctx)
	if err != nil {
		return nil, err
	}

	return v.Proto(), nil
}

func UserPick(req *apptest.UserRef) (predicate.User, error) {
	switch req.WhichKey() {
	case apptest.UserRef_Id_case:
		if v, err := uuid.FromBytes(req.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
		} else {
			return user.IDEQ(v), nil
		}
	case apptest.UserRef_Alias_case:
		k := req.GetAlias()
		ps := make([]predicate.User, 0, 2)
		ps = append(ps, user.AliasEQ(k.GetAlias()))
		if p, err := TenantPick(k.GetTenant()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "alias.tenant: %s", err)
		} else {
			ps = append(ps, user.HasTenantWith(p))
		}
		return user.And(ps...), nil
	default:
		return nil, status.Errorf(codes.InvalidArgument, "unknown type of key: %s", req.WhichKey())
	}
}
